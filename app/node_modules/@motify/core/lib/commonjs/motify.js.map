{"version":3,"sources":["motify.tsx"],"names":["motify","ComponentWithoutAnimation","Component","Animated","createAnimatedComponent","withAnimations","Motified","Moti","animate","style","from","transition","delay","state","stylePriority","onDidAnimate","exit","animateInitialState","exitTransition","props","ref","animated","displayName","name"],"mappings":";;;;;;;AAAA;;AAGA;;AACA;;;;;;;;;;AAEe,SAASA,MAAT,CAMbC,yBANa,EAMoC;AACjD,QAAMC,SAAS,GAAGC,+BAASC,uBAAT,CAChBH,yBADgB,CAAlB;;AAIA,QAAMI,cAAc,GAAG,MAAM;AAC3B,UAAMC,QAAQ,gBAAG,uBAUf,SAASC,IAAT,CACA;AACEC,MAAAA,OADF;AAEEC,MAAAA,KAFF;AAGEC,MAAAA,IAAI,GAAG,KAHT;AAIEC,MAAAA,UAJF;AAKEC,MAAAA,KALF;AAMEC,MAAAA,KANF;AAOEC,MAAAA,aAPF;AAQEC,MAAAA,YARF;AASEC,MAAAA,IATF;AAUEC,MAAAA,mBAVF;AAWEC,MAAAA,cAXF;AAYE,SAAGC;AAZL,KADA,EAeAC,GAfA,EAgBA;AACA,YAAMC,QAAQ,GAAG,mCAAqB;AACpCb,QAAAA,OADoC;AAEpCE,QAAAA,IAFoC;AAGpCC,QAAAA,UAHoC;AAIpCC,QAAAA,KAJoC;AAKpCC,QAAAA,KALoC;AAMpCC,QAAAA,aANoC;AAOpCC,QAAAA,YAPoC;AAQpCC,QAAAA,IARoC;AASpCE,QAAAA,cAToC;AAUpCD,QAAAA;AAVoC,OAArB,CAAjB;AAaA,0BACE,6BAAC,SAAD,eACOE,KADP;AACsB;AACpB,QAAA,KAAK,EAAE,CAACV,KAAD,EAAQY,QAAQ,CAACZ,KAAjB,CAFT;AAGE,QAAA,GAAG,EAAEW,GAHP,CAGmB;;AAHnB,SADF;AAOD,KA/CgB,CAAjB;AAiDAd,IAAAA,QAAQ,CAACgB,WAAT,kBACEpB,SAAS,CAACoB,WAAV,IAAyBpB,SAAS,CAACqB,IAAnC,IAA2C,QAD7C;AAIA,WAAOjB,QAAP;AACD,GAvDD;;AAyDA,SAAOD,cAAP;AACD","sourcesContent":["import React, { forwardRef, ComponentType, FunctionComponent } from 'react'\nimport type { ImageStyle, TextStyle, ViewStyle } from 'react-native'\nimport type { MotiProps } from './types'\nimport useMapAnimateToStyle from './use-map-animate-to-style'\nimport Animated from 'react-native-reanimated'\n\nexport default function motify<\n  Style,\n  Props extends { style?: Style },\n  Ref,\n  ExtraProps,\n  Animate = ViewStyle | ImageStyle | TextStyle\n>(ComponentWithoutAnimation: ComponentType<Props>) {\n  const Component = Animated.createAnimatedComponent(\n    ComponentWithoutAnimation as FunctionComponent<Props>\n  )\n\n  const withAnimations = () => {\n    const Motified = forwardRef<\n      Ref,\n      {\n        // This sucks, but if we use Animated.AnimateProps<Props> it breaks types\n        animatedProps?: any\n      } & Props &\n        MotiProps<Animate> &\n        ExtraProps & {\n          children?: React.ReactNode\n        }\n    >(function Moti(\n      {\n        animate,\n        style,\n        from = false as const,\n        transition,\n        delay,\n        state,\n        stylePriority,\n        onDidAnimate,\n        exit,\n        animateInitialState,\n        exitTransition,\n        ...props\n      },\n      ref\n    ) {\n      const animated = useMapAnimateToStyle({\n        animate,\n        from,\n        transition,\n        delay,\n        state,\n        stylePriority,\n        onDidAnimate,\n        exit,\n        exitTransition,\n        animateInitialState,\n      })\n\n      return (\n        <Component\n          {...(props as any)} // TODO\n          style={[style, animated.style]}\n          ref={ref as any} // TODO\n        />\n      )\n    })\n\n    Motified.displayName = `Moti.${\n      Component.displayName || Component.name || 'NoName'\n    }`\n\n    return Motified\n  }\n\n  return withAnimations\n}\n"]}